close all
clear all
clc
%% Exercice 1 
% test de la fonction CoutLogB
% alpha un polynome
% log(1-eps)~eps

n=100;
x=sort(rand(n,1));
f=cos(pi*x);
sig=0.1;
y=f+sig*randn(size(f));

X=[ones(size(x)) x x.^2 x.^3 x.^4 x.^5 x.^6 x.^7 x.^8 x.^9 x.^10 x.^11 x.^12];

% Calcul de alpha en utilisant la fonction backslash

c=1.5;
alpha=X\y;
coutmmc=(X*alpha-y)'*(X*alpha-y)/c;
cout = CoutLogB(alpha,X,y,c);
gradBS=grad_logB(alpha,X,y,c);


% Quand C est tres grand, on retrouve bien les moindres carrees

% test avec CVX
c=1.55;
tic 
cvx_begin
    variables ac(size(X,2),1)
    minimize( -sum(log(1-(X*ac - y).^2/c^2)))
    
cvx_end
tCVX=toc
coutCVX = CoutLogB(ac,X,y,c);
gradCVX=grad_logB(ac,X,y,c);

% On trouve un cout faible de 0.47 avec CVX, et de 0.51 avec la fonction backslash, pour un c=1.55

% Calcul du gradient en derivant la fonction de cout 

g = grad_logB(alpha,X,y,c);

% test de gradlogB par approximation du gradient par differences finis

a =zeros(size(X,2),1);
err = X*a-y;
c =max(abs(err))+.01;
fc = CoutLogB(a,X,y,c);
grad = grad_logB(a,X,y,c);

[n,p] =size(X);
chouia =sqrt(eps);
for i=1:p 
    d =zeros(p,1);
    d(i) = 1;
    fd = CoutLogB(a+chouia*d,X,y,c);
    e(i) = (grad(i) + ((fc - fd)/chouia))/grad(i);
end

% Calcul de la matrice Hessienne 

H = Hess_logB(a,X,y,c);

% Methode de gradient a pas fixe 

nt=1000;
xt=linspace(0,1,nt)';
Xt=[ones(size(xt)) xt xt.^2 xt.^3 xt.^4 xt.^5 xt.^6 xt.^7 xt.^8 xt.^9 xt.^10 xt.^11 xt.^12];
pas=0.001;
g = 1;
k = 1;
nbitemax = 10000;
fprintf(1,'--------------------------\n');
fprintf(1,'nb ite cout \n');
fprintf(1,'--------------------------\n');
figure(1);
hold on 
tic
while((norm(g) > 0.005) && (k < nbitemax))
    cout = CoutLogB(a,X,y,c);
    fprintf(1,'%8d %12.4f \n',k, cout);
    g = grad_logB(a,X,y,c);
    a = a - pas*g;
    if mod(k,100) == 0 ,
        plot(xt,Xt*a,'--r');
    end;
    k = k+1;
end
tGRAD=toc
plot(xt,Xt*a,'b','LineWidth',2);
plot(x,y,'or');
hold off

% Le temps de calcul est plus rapide pour le pas fixe que pour CVX
% Si le pas choisi est trop grand on risque de partir dans le negatif, si
% il est trop petit, la fonction convergera trop lentement 

% Methode de gradient a pas variable 

tol=0.005;
figure(2);
hold on 

while((norm(g) > tol) && (k < nbitemax))
    cout = CoutLogB(a,X,y,c);
    fprintf(1,'%8d %12.5f %12.8f \n',k, cout, pas);
    if(cout < cout_old)
        pas = (1+alpha)*pas;
        cout_old = cout;
    else
        a = a + pas*g;
        pas = pas/beta;
    end
    g = grad_logB(a,X,y,c);
    a = a - pas*g;
    if mod(k,10) == 0 ,
        plot(xt,Xt*a,'--r');
    end;
    k = k+1;
end
hold off





    